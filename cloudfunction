import random

def calculate_runs_miles(total_seconds, distance, adjustment_range=(0.85, 0.92)):
    try:
        # Randomize the adjustment factor within the specified range
        adjustment_factor = random.uniform(*adjustment_range)
        adjusted_total_seconds = total_seconds * adjustment_factor

        # Calculate pace
        pace_seconds = adjusted_total_seconds / distance
        pace_minutes = int(pace_seconds / 60)
        pace_seconds %= 60
        pace_seconds_rounded = round(pace_seconds, 2)

        # Calculate the pace range
        lower_bound = f"{pace_minutes}:{max(0, int(pace_seconds_rounded - 5)):02d}"
        upper_bound = f"{pace_minutes}:{min(59, int(pace_seconds_rounded + 5)):02d}"

        unit = "mile"
        runs_result = f"Pace range: {lower_bound} to {upper_bound} per {unit}."

        return runs_result
    except ZeroDivisionError:
        raise ValueError("Distance cannot be zero.")

def interval_runs_miles(total_seconds):
    return calculate_runs(total_seconds, 3.1)

def tempo_runs_miles(total_seconds):
    return calculate_runs(total_seconds, 3.1, adjustment_range=(1.06, 1.15))

def easy_runs_miles(total_seconds):
    return calculate_runs(total_seconds, 3.1, adjustment_range=(1.40, 1.65))

def long_runs_miles(total_seconds):
    return calculate_runs(total_seconds, 3.1, adjustment_range=(1.20, 1.35))

def fartlek_runs_miles(total_seconds):
    return calculate_runs(total_seconds, 3.1, adjustment_range=(1.10, 1.20))



def calculate_runs(total_seconds, distance, adjustment_range=(0.85, 0.92), metrics="km"):
    try:
        # Randomize the adjustment factor within the specified range
        adjustment_factor = random.uniform(*adjustment_range)
        adjusted_total_seconds = total_seconds * adjustment_factor

        # Calculate pace
        pace_seconds = adjusted_total_seconds / distance
        pace_minutes = int(pace_seconds / 60)
        pace_seconds %= 60
        pace_seconds_rounded = round(pace_seconds, 2) 

        # Calculate the pace range
        lower_bound = f"{pace_minutes}:{max(0, int(pace_seconds_rounded - 5)):02d}"
        upper_bound = f"{pace_minutes}:{min(59, int(pace_seconds_rounded + 5)):02d}"

        unit = "mile" if metrics == "miles" else "km"
        runs_result = f"Pace range: {lower_bound} to {upper_bound} per {unit}."

        return runs_result
    except ZeroDivisionError:
        raise ValueError("Distance cannot be zero.")

def interval_runs(total_seconds, metrics="km"):
    return calculate_runs(total_seconds, 5.0, metrics=metrics)

def tempo_runs(total_seconds, metrics="km"):
    return calculate_runs(total_seconds, 5.0, adjustment_range=(1.06, 1.15), metrics=metrics)

def easy_runs(total_seconds, metrics="km"):
    return calculate_runs(total_seconds, 5.0, adjustment_range=(1.40, 1.65), metrics=metrics)

def long_runs(total_seconds, metrics="km"):
    return calculate_runs(total_seconds, 5.0, adjustment_range=(1.20, 1.35), metrics=metrics)

def fartlek_runs(total_seconds, metrics="km"):
    return calculate_runs(total_seconds, 5.0, adjustment_range=(1.10, 1.20), metrics=metrics)

def extract_seconds(total_time):
    try:
        minutes, seconds = map(int, total_time.split(':'))
        if 0 <= minutes <= 59 and 0 <= seconds <= 59:
            return minutes * 60 + seconds  # Convert minutes to seconds and add to seconds
        else:
            raise ValueError("Invalid minutes or seconds value.")
    except ValueError:
        raise ValueError("Invalid time format. Please use 'mm:ss' format.")

def calculate_pace(total_seconds, distance, metrics="km"):
    try:
        pace_seconds = total_seconds / distance
        pace_minutes = int(pace_seconds / 60)
        pace_seconds %= 60
        pace_seconds_rounded = round(pace_seconds)

        unit = "mile" if metrics == "miles" else "km"
        return pace_minutes, pace_seconds_rounded, unit
    except ZeroDivisionError:
        raise ValueError("Distance cannot be zero.")

def calculate_pace_km(total_seconds):
    return calculate_pace(total_seconds, 5.0)

def calculate_pace_miles(total_seconds):
    return calculate_pace(total_seconds, 3.1, metrics="miles")

def generate_runs_response(request):
    try:
        if request.method == 'OPTIONS':
            # Handle preflight request
            headers = {
                'Access-Control-Allow-Origin': '*',  # You can replace '*' with specific origins
                'Access-Control-Allow-Methods': 'POST',
                'Access-Control-Allow-Headers': 'Content-Type',
            }
            return ('', 204, headers)
        if request.method == 'POST':
            request_json = request.get_json()

            ip_data = request_json.get('ipData')
            print('User IP Data:', ip_data)
            
            if request_json is None or 'time' not in request_json:
                return 'Error: "time" parameter is required in the JSON payload.', 400
            
            total_time = request_json['time']
            total_seconds = extract_seconds(total_time)

            metrics = request_json.get('metrics', 'km') if 'metrics' in request_json else 'km'       
            interval_runs_result = interval_runs(total_seconds, metrics=metrics)
            tempo_runs_result = tempo_runs(total_seconds, metrics=metrics)
            easy_runs_result = easy_runs(total_seconds, metrics=metrics)
            
            if metrics == 'miles':
                pace_minutes, pace_seconds_rounded, unit = calculate_pace_miles(total_seconds)
            else:
                pace_minutes, pace_seconds_rounded, unit = calculate_pace(total_seconds, 5.0, metrics=metrics)
            
            pace_result = f"Pace: {pace_minutes}:{pace_seconds_rounded:02d} per {unit}."
            
            # Use the corresponding functions for miles
            if metrics == 'miles':
                long_runs_result = long_runs_miles(total_seconds)
                fartlek_runs_result = fartlek_runs_miles(total_seconds)
                interval_runs_result = interval_runs_miles(total_seconds)
                tempo_runs_result = tempo_runs_miles(total_seconds)
                easy_runs_result = easy_runs_miles(total_seconds)
            else:
                long_runs_result = long_runs(total_seconds, metrics=metrics)
                fartlek_runs_result = fartlek_runs(total_seconds, metrics=metrics)
                interval_runs_result = interval_runs(total_seconds, metrics=metrics)
                tempo_runs_result = tempo_runs(total_seconds, metrics=metrics)
                easy_runs_result = easy_runs(total_seconds, metrics=metrics)
            
            response = {
                "interval_runs": interval_runs_result,
                "tempo_runs": tempo_runs_result,
                "easy_runs": easy_runs_result,
                "pace": pace_result,
                "long_runs": long_runs_result,
                "fartlek_runs": fartlek_runs_result
            }

            # Add CORS headers to the response
            headers = {
                'Access-Control-Allow-Origin': '*',  # You can replace '*' with specific origins
                'Access-Control-Allow-Methods': 'POST',
                'Access-Control-Allow-Headers': 'Content-Type',
            }

            return (response, 200, headers)
    except ValueError as ve:
        return f"Validation Error: {str(ve)}", 400
    except Exception as e:
        return f"An error occurred: {str(e)}", 500


